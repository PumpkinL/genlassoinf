  # Make sure you're working from [dropboxfolder]/code
#  workingdir = '~/../../media/shyun/Bridge/Dropbox/CMU/courses(CURRENT)/genlassoinf/code'
#  setwd(workingdir)
  source("settings.R")
  source('funs.R')
  source('examples/testfuns.R')
  #
  source('dualPathSvd2.R')
  library(selectiveInference)  
  source('selectinf/selectiveInference/R/funs.inf.R')
  library(genlasso)
  library(RColorBrewer)
  verbose = F

## Four settings
  beta1 = rep(0,20)

  beta2.none = rep(0,20)

  fac = .1
  beta2.low = .5*fac*seq(from=21,to=40) - 10*fac

  fac = .2
  beta2.med = .5*fac*seq(from=21,to=40) - 10*fac

  fac = .5
  beta2.high = .5*fac*seq(from=21,to=40) - 10*fac

## Pick one 
  beta0 = c(beta1,beta2.low)
  subname = "low"
  n = length(beta0) #  n = 60

## Run simulation
  consec = 2
  sigma=1
  tf.order=1
  if(subname=="none") nsim = 100000 else nsim = 50000
  D = makeDmat(n,order=tf.order) 
  pvals = verdicts = pvals.decluttered = verdicts.decluttered = array(NA,dim=c(nsim,n))
  maxsteps = 20

  for(isim in 1:nsim){
     cat('\r', isim, "out of", nsim)
  
    # Generate Data and path
    y0 = beta0 + rnorm(length(beta0),0,sigma)
    f0 = dualpathSvd2(y0, D, maxsteps = maxsteps,verbose=F)
           
    # Collect Gammat at stop time
    bic   = get.modelinfo(f0,y0,sigma,maxsteps,D=D, stoprule = 'bic')$ic
    stop.time = which.rise(bic,consec=consec) - 1
    stop.time = pmin(stop.time,n-consec-1)
      
    if(!(stop.time+consec < maxsteps)){
      print('bic rule hasnt stopped!')
      next
    }
            
    Gobj.new.with.stoptime = getGammat.with.stoprule(obj=f0,y=y0,
                                       condition.step = stop.time+consec,
                                       stoprule = "bic", sigma=sigma, type='tf',
                                       consec=consec, maxsteps=maxsteps,D=D)
    G = Gobj.new.with.stoptime$Gammat
    u = Gobj.new.with.stoptime$u
    
    #stopifnot(polyhedron.checks.out(y0,G.bic,u.bic))
     ## I did this because there is sometimes miniscule numerical errors in (Gamma^Ty - u)
    if(!polyhedron.checks.out(y0,G,u)){
        min(G%*%y-u)
        print("polyhedron is problematic")
        next
    }

    # Conduct tests and record pvals + stoptimes
    states = get.states(f0$action)

    # declutter the last states
    if(stop.time==0 ) next
    final.model.orig = states[[stop.time+1]]
    final.model.orig.signs = f0$ss[[stop.time+1]]
    final.model.cluttered = sort(final.model.orig)  
    final.model.decluttered = declutter(final.model.orig)

    # test only the decluttered states, with /their/ adjusted contrasts
    final.models = list(final.model.cluttered,final.model.decluttered)
    for(kk in 1:2){
      final.model = final.models[[kk]]
      ntests = length(final.model)
      if(stop.time > 0){          
        for(ii in 1:ntests){
          test.knot      = final.model[ii]
          adj.knot       = final.model
          test.knot.sign = final.model.orig.signs[which(final.model.orig == test.knot)]
          
          v =     make.v.tf.fp(test.knot = test.knot, 
                              adj.knot  = adj.knot,
                              test.knot.sign = test.knot.sign,
                              D = D)                            

                              
          coord = test.knot
          pval  = pval.fl1d(y0,G,dik=v,sigma,u=u)
          verdict = (pval < (0.05/ntests))
          
          if(kk==1){
            pvals[isim,coord] = pval
            verdicts[isim,coord] = verdict
          } else {
            pvals.decluttered[isim,coord] = pval
            verdicts.decluttered[isim,coord] = verdict
          }
        }
      }
    }
  }
  
  save(pvals, verdicts, pvals.decluttered, verdicts.decluttered, nsim,consec,sigma,tf.order,n,D,
       file = file.path(outputdir, paste0("tf-simple-",subname,".Rdata")))
