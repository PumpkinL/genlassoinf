## MAKE sure you're working from [dropboxfolder]/code
  source("settings.R")
  source('selectinf/selectiveInference/R/funs.inf.R')
  source('funs.R')
  source('dualPathSvd2.R')
  library(genlasso)
  library(Matrix)
  library(RColorBrewer)
  load(file="examples/stockData.RData")
#  matplot(tricky_prices[,30],type='o',pch=sapply(1:30,toString))

# Format data and response
  center = function(vec){
    as.numeric(scale(vec, center=TRUE,scale=FALSE))
  }  
  log.serial.transform = function(vec){
    ratios =  vec[2:length(vec)] / vec[1:(length(vec)-1)]
    logratios = log(ratios)
    return(logratios)
  }  
  X.uncentered = tricky_prices[,c(1,2,3)]#c(1,2,3,4,5)
  ## matplot(X.uncentered)
  X = apply(X.uncentered,2,log.serial.transform)
  X = apply(X,2,center)
  TT = nrow(X)
  J = ncol(X)

  ## This setting with any noise detects a spurious cut
  beta0 = c(rep(c(-10,10,-10),each=TT/3),-10,-10, 
            rep(c(-10,10),each=TT/2),10,  # (-5 and 5)
            ## rep(c(10,10,10),each=TT))   #
            rep(10,each=TT))/10
  ## plot(beta0,type='p')
  ## abline(v=TT*(0:4))

  X.augmented = do.call(cbind, lapply(1:ncol(X), function(icol) diag(X[,icol])))
  mn = X.augmented %*% beta0

#########################
## Run and save path  ###
#########################
  ## isigma = 3           #
 # sigma = c(0.001,0.005,0.01,0.02,0.05)[isigma]
  sigma=0.01/5 # /10
  maxsteps=20
  #sigma=0.01/10 and seed =1 works perfectly
  seed =4# 1#0
  set.seed(seed) #
  y = mn + rnorm(TT,0,sigma)
  el.net.penalty = 0.001^2#0.0001
  X.tilde = rbind(X.augmented,diag(rep(sqrt(el.net.penalty), ncol(X.augmented)) ))
  y.tilde = c(y,rep(0,ncol(X.augmented)))
  
  D0 = makeDmat(TT,order=0)
  D.orig = do.call(bdiag,lapply(1:J,function(jj) D0))
  ginvX.tilde = ginv(X.tilde)
  ginvX.orig  = ginv(X)
  D.tilde = as.matrix(D.orig %*% ginvX.tilde)
  do.declutter = T
  
  # Fit path
  f0 = dualpathSvd2(y.tilde, D.tilde, maxsteps=maxsteps,verbose=T)
  actions=f0$action[f0$action!=0]
  states = get.states(f0$action)
  bic = getbic.regression(y0.orig=y, f0=f0, sigma=sigma, maxsteps = maxsteps-1,
                         X.orig = X, ginvX.orig = ginvX.orig, D.orig = D.orig)
  consec=2
  stop.time = which.rise(bic,consec=consec) -1
  stop.time = pmin(stop.time,length(y)-consec-1)         

  plot(bic); text((1:length(f0$action)+1), rep(0.25,length(f0$action)), labels=f0$action)
  abline(v=stop.time+1)

 
  Gobj.new.with.stoptime = getGammat.with.stoprule(obj=f0, y=y.tilde, y0.orig=y,
                                                   condition.step = stop.time+consec,
                                                   stoprule = "bic", sigma=sigma,
                                                   consec=consec, maxsteps=maxsteps, type="regression",
                                                   X.orig=X, ginvX.orig = ginvX.orig,D.orig=D.orig)
  G = Gobj.new.with.stoptime$Gammat
  u = Gobj.new.with.stoptime$u; #u = rep(0,nrow(G))

save(maxsteps,D.tilde,D.orig,ginvX.tilde,ginvX.orig,beta0,X.augmented,beta0,X,
     TT,J,X.uncentered,y, consec,y.tilde,X.tilde, f0, bic, sigma, stop.time, G,
     u, file=file.path(outputdir,paste0("stockData-sim-samescale-new.Rdata")))

## Load and harvest some things from path
  load(file=file.path(outputdir, paste0("stockData-sim-samescale-new.Rdata")))
  y = y.tilde[1:TT]  
  states = get.states(f0$action)
  final.model.orig = states[[stop.time+1]]
  final.model.orig.signs = f0$ss[[stop.time+1]]

## Conduct Inference
  if(min(G%*%y.tilde-u)<=0){ print("polyhedron is off");   print((G%*%y.tilde)[which(G%*%y.tilde<u)])}
  final.model.decluttered = declutter(final.model.orig,10)
  vsegments = list()
  pseg = c()
  pseg.lrt=c()
  for(jj in 1:length(final.model.decluttered)){print(jj)
    test.knot = final.model.decluttered[jj]
    adj.knot  = final.model.decluttered[-jj]
    test.knot.sign = final.model.orig.signs[which(final.model.orig == test.knot)]
    vsegment = make.v.regression(test.knot, adj.knot, test.knot.sign, f0, TT, J, X, X.tilde)
    vsegment.long = c(vsegment, rep(0,TT*J))
    pseg[jj] = pval.fl1d(y=y.tilde, G=G, u=u, dik=vsegment.long, sigma=sigma)
  }

round(pseg,3)
#    save(maxsteps,D.tilde,D.orig,ginvX.tilde,ginvX.orig,beta0,X.augmented,beta0,X,TT,J,X.uncentered,y,
#         consec,y.tilde,X.tilde,pseg, f0, file=file.path(outputdir,paste0("stockData-morebreaks-",isigma,"-nsim-",nsim,".Rdata")))
  
names(pseg) = final.model.decluttered
  betalist.ind = lapply(1:5, function(ii) (TT*(ii-1)+1):(TT*ii))
  membership = sapply(final.model.decluttered, function(thiscut) which(unlist(lapply(betalist.ind,function(thisvar.ind) any(thiscut %in% thisvar.ind)))))
  membership.before.declutter = sapply(final.model.orig, function(thiscut) which(unlist(lapply(betalist.ind,function(thisvar.ind) any(thiscut %in% thisvar.ind)))))
#############
## Plot  ####
#############
ylim = c(0,20)
xlim = c(0,TT+10)
x = c(1:TT)
pch=16
w=6;h=3;
xlab = "Location"
ylab = ""
lty.knot=3
lwd.knot=1.5
lcol.knot="blue"#"grey50"
lcol.knot.before.declutter="grey85"
lcols.beta = brewer.pal(3,"Set2")
cols = lcols.beta#brewer.pal(5,"Set1")
lwd.beta = 2
betalist = list(beta0[1:TT],
                beta0[(TT+1):(2*TT)],
                beta0[(2*TT+1):(3*TT)])
xx = (final.model.decluttered - (membership-1)*TT)
xx.before.declutter = (final.model.orig - (membership.before.declutter-1)*TT)
mar = c(2,3.5,1,1)
mar3 = c(3.5,3.5,1,1)
ylab = "Coefficient"

for(jj in 1:3){
    if(jj==3){ h=2.6 }
    if(jj==2){ h=2.6 }
    if(jj==1){ h=2 }
    pdf(file.path(outputdir,paste0("new-stockdata-",jj,".pdf")),width=w,height=h)

    if(jj==3){ par(mar=mar3)} else {par(mar=mar)}

    ## collect some things 
    rng = range(betalist[[jj]])
    this.xx = xx[membership==jj]
    this.xx.before.declutter = xx.before.declutter[membership.before.declutter==jj]
    this.beta = betalist[[jj]]
    this.pseg = signif(pseg[membership==jj],3)

    ## draw signal and detected knots
    ylim = rng + (rng[2]-rng[1])/3*c(-1,1)
    xlim = c(1, (TT+10))
    plot(NA,ylim=ylim,xlim=xlim,axes=F,xlab="",ylab="")
    abline(v = this.xx.before.declutter, lty=lty.knot, lwd=lwd.knot, col = lcol.knot.before.declutter)
    abline(v = this.xx,lty=lty.knot, lwd=lwd.knot,col=lcol.knot)

    lines(this.beta, col = lcols.beta[jj], lwd = lwd.beta)
    if(jj==3){ axis(1);title(xlab=xlab,line=1.9) } else { axis(1)}
    axis(2);{title(ylab=ylab, line = 2.1)}
    
    ## Label locations 
    myletters = toupper(letters[1:length(this.xx)] )
    text(x=this.xx, y=ylim[2]-(ylim[2]-ylim[1])/10 + (-sum(membership==jj)+1):(0)/10, label = myletters)

    position = (if(jj==1) "topright" else "bottomright")
    ## Show p-values in legend
    if(!all(is.na(this.pseg))){
        if(jj==2){
        legend(position,
               lty = c(rep(NA,length(myletters)),rep(lty.knot,2)),
               lwd = c(rep(NA,length(myletters)),rep(lwd.knot,2)),
               col = c(rep("black",length(myletters)),lcol.knot, lcol.knot.before.declutter),
               pch = c(myletters, rep(NA,2)),
               legend = c(this.pseg,"Knots after declutter","Knots before declutter"),
                             ## paste(myletters,
                             ##  rep(":", length(this.pseg)),
               ## pch=rep(NA,length(this.pseg)),
               ## title="p-values by location",
               bg="white",
               x.intersp=1,
               bty="o",
               box.lwd = 1)
        ## text.width=c(0.5,0.5,0.5,0.5))
       } else { 
        legend(position,
               lty = c(rep(NA,length(myletters))),
               lwd = c(rep(NA,length(myletters))),
               col = c(rep("black",length(myletters))),
               pch = c(myletters),
               legend = c(this.pseg),
                             ## paste(myletters,
                             ##  rep(":", length(this.pseg)),
               ## pch=rep(NA,length(this.pseg)),
               ## title="p-values by location",
               bg="white",
               x.intersp=1,
               bty="o",
               box.lwd = 1)
               ## text.width=c(0.5,0.5,0.5,0.5))
   } 
   graphics.off()
}}

################################
## Plot just the five stocks ###
################################
ltys = rep(1,5)
xlab="Trading Day (2015)"
ylab="Stock Price"
xlim=c(0,270)
w=5;h=7.5
mar=c(4,1,1,1)
pdf(file=file.path(outputdir,"stockdata-raw.pdf"),width=w,height=h)
matplot(tricky_prices[,1:3],col=cols,type='l',lty=ltys, ylim=c(60,190),axes=F,ylab=ylab,xlab=xlab)
text(x=rep(260,3)-20,
     y=as.numeric(tricky_prices[TT-1,1:3])+c(10,5,15),
     labels=paste(rep("stock",3),1:3))
## lines(scale(exp(y[2:TT]/y[1:(TT-1)]))*10+100,type='l')
## klines(y+100,col=cols,type='l')
axis(1)
axis(2)
graphics.off()
